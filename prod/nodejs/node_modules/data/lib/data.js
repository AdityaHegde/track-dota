var mongoose = require('mongoose'),
    utils = require('utils');
mongoose.connect("mongodb://nodejitsu:22c6b4a8384a34b2365e89d7f199f1c3@dharma.mongohq.com:10022/nodejitsudb1608318958");

var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function callback () {
  console.log("connection successful");
});

var 
personBillSchema = mongoose.Schema({
  billId : Number,
  owes : Number,
  owed : Number,
}),
personSchema = mongoose.Schema({
  id : Number,
  name : String,
  bills : [personBillSchema],
  owes : Number,
  owed : Number,
}),
personInvolvedSchema = mongoose.Schema({
  billId : Number,
  name : String,
  toPay : Number,
  paid : Number,
}),
billSchema = mongoose.Schema({
  name : String,
  amt : Number,
  peopleInvolved : [personInvolvedSchema],
}),
calcInstanceSchema = mongoose.Schema({
  name : String,
  people : [personSchema],
  bills : [billSchema],
}),
calcInstance = mongoose.model('CalcInstance', calcInstanceSchema);

function createCalcInstance(jsonData, callback) {
  var calc = new calcInstance(jsonData);
  calc.save(function(err) {
    if(err) callback(utils.retError("Save error : "+err));
    callback(utils.retStatus("Save complete"));
  });
}

exports.saveData = function(jsonData, callback) {
  calcInstance.findOne({ name : jsonData.calcName }, 'name', function(err, calc) {
    if(err) {
      createCalcInstance(jsonData, callback);
    }
    else {
      calcInstance.remove({ name : jsonData.calcName }, function (err) {
        if (err) callback(utils.retError("Object already present"));
        createCalcInstance(jsonData, callback);
      });
    }
  });
};

exports.getData = function(calcName, callback) {
  calcInstance.findOne({ name : calcName }, 'name people bills', function(err, calc) {
    if(err) {
      callback(utils.retError("object not found"));
    }
    callback(utils.retResult(calc.toObject()));
  });
};
