var mongoose = require('mongoose'),
    utils = require('utils');
mongoose.connect("mongodb://nodejitsu:22c6b4a8384a34b2365e89d7f199f1c3@dharma.mongohq.com:10022/nodejitsudb1608318958");

var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function callback () {
  console.log("connection successful");
});

var 
ObjectId = mongoose.Schema.Types.ObjectId,
personSchema = mongoose.Schema({
  id : Number,
  name : String,
  personEvents : [{
    event : String,
    person : String,
  }],
  owes : Number,
  owed : Number,
}),
person = mongoose.model('Person', personSchema),
eventSchema = mongoose.Schema({
  name : String,
  amt : Number,
  eventPeople : [{
    event : String,
    person : String,
    toPay : Number,
    paid : Number,
  }],
}),
event = mongoose.model('Event', eventSchema),
outingSchema = mongoose.Schema({
  outing_name : String,
  people : [personSchema],
  events : [eventSchema],
}),
outing = mongoose.model('Outing', outingSchema),
modelMap = {
  'outing' : outing,
  'person' : person,
  'event' : event,
};
outing.searchAttr = "_id";
outing.queryParam = "id";
person.searchAttr = "_id";
person.queryParam = "id";
event.searchAttr = "_id";
event.queryParam = "id";

exports.createData = function(modelName, jsonData, callback) {
  var model = modelMap[modelName],
      obj = new model(jsonData);
  obj.save(function(err, obj) {
    if(err) {
      callback(utils.retError("Create error : "+err));
    }
    else {
      callback(utils.retResult({_id : obj._id}));
    }
  });
};

exports.update = function(modelName, jsonData, callback) {
  var query = {}, model = modelMap[modelName];
  query[model.searchAttr] = param[model.queryParam] || param[model.searchAttr];
  model.update(query, jsonData, {}, function(err) {
    if(err) {
      callback(utils.retError("Update error : "+err));
    }
    else {
      callback(utils.retResult({_id : jsonData._id}));
    }
  });
};

exports.getData = function(modelName, param, callback) {
  var query = {}, model = modelMap[modelName];
  query[model.searchAttr] = param[model.queryParam] || param[model.searchAttr];
  console.log(query);
  model.findOne(query, function(err, obj) {
    if(err || !obj) {
      callback(utils.retError("object not found"));
    }
    else {
      callback(utils.retResult(obj.toObject()));
    }
  });
};
